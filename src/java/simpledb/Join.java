package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;


    private final JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.left = null;
        this.right = null;
    }

    public JoinPredicate getJoinPredicate() {

        return this.p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
        super.open();
        if (child1.hasNext()) {
            left = child1.next();
        }
        if (child2.hasNext()) {
            right = child2.next();
        }
    }

    public void close() {
        child1.close();
        child2.close();
        super.close();
        left = null;
        right = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.close();
        this.open();
    }


    private Tuple left;
    private Tuple right;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while (left != null || right != null) {
            Tuple next = null;
            if (p.filter(left, right)) {
                next = getTuple(left, right);
            }
            // fetch next items
            if (child2.hasNext()) {
                right = child2.next();
            } else {
                if (child1.hasNext()) {
                    left = child1.next();
                    child2.rewind();
                    if (child2.hasNext()) {
                        right = child2.next();
                    }
                } else {
                    left = null;
                    right = null;
                }
            }

            // return if exists
            if (next != null) {
                return next;
            }
        }
        return null;
    }

    private Tuple getTuple(Tuple t1, Tuple t2) {
        Tuple tuple = new Tuple(getTupleDesc());
        Field[] t1Fields = t1.getFields();
        Field[] t2Fields = t2.getFields();
        int newLength = t1Fields.length + t2Fields.length;
        Field[] target = new Field[newLength];
        System.arraycopy(t1Fields, 0, target, 0, t1Fields.length);
        System.arraycopy(t2Fields, 0, target, t1Fields.length , t2Fields.length);
        for (int i = 0; i < newLength; i++) {
            tuple.setField(i, target[i]);
        }
        return tuple;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
